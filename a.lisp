(defmacro range(n) `(loop for i from 0 to ,n collect i))
(defmacro fm (a) `(format t "~A~%" ,a))
(defmacro toint(s) `(parse-integer ,s))
(defmacro foldl (fn lst initval) `(reduce ,fn ,lst :initial-value ,initval))
(defmacro foldl1 (fn lst) `(reduce ,fn ,lst))

(defun splitat (c line)
  (labels ((rec (line acc)
				(let ((pos (position-if (lambda(cc) (char= c cc)) line)))
				  (if pos
					  (rec (subseq line (1+ pos)) (cons (subseq line 0 pos) acc))
					(cons line acc)))))
	(rec line nil)))
(defun readline (callback)
  (labels ((rec (i)
				(let ((line (read-line nil nil)))
				  (when (not (zerop (length line)))
					(funcall callback line i)
					(rec (1+ i))
					)
				  )
				))
	(rec 0)))
(defun start()
  (readline (lambda(line i)
			  (cond ((zerop i))
					((evenp i) (mapcar (lambda(s) (format t "~A~%" s)) (splitat #\space line)))))))
(start)
